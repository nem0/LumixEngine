import "engine/shaders/surface_base.inc"

uniform("Material color", "color", {1, 1, 1, 1})
uniform("Roughness", "normalized_float", 1)
uniform("Metallic", "normalized_float", 0)
uniform("Emission", "float", 0)
uniform("Translucency", "normalized_float", 0)
uniform("Height scale", "float")

surface_shader_ex({
	texture_slots = {
		{
			name = "Albedo",
			default_texture = "engine/textures/common/white.tga"
		},
		{
			name = "Normal",
			default_texture = "engine/textures/common/default_normal.tga"
		},
		{
			name = "Roughness",
			default_texture = "engine/textures/common/white.tga"
		},
		{
			name = "Metallic",
			define = "HAS_METALLICMAP"
		},
		{
			name = "Ambient occlusion",
			define = "HAS_AMBIENT_OCCLUSION_TEX"
		},
		{
			name = "Displacement",
			default_texture = "engine/textures/common/white.tga"
		}
	},

	fragment_preface = [[
		float selfshadow(vec2 uv, vec3 light_dir) {
			if (light_dir.y <= 0.0) return 0;

			vec2 dPdx = dFdx(uv);
			vec2 dPdy = dFdy(uv);
			float layers = mix(16, 8, abs(light_dir.y));

			float depth_step = 1.0 / layers;
			vec2 P = light_dir.xz / abs(light_dir.y) * u_height_scale;
			vec2 uv_step = P / layers;

			float depth = texture(t_displacement, uv).r;
			float layer_depth = depth;

			while (layer_depth <= depth && layer_depth > 0.0) {
				uv += uv_step;
				depth = textureGrad(u_displacement, uv, dPdx, dPdy).r;
				layer_depth -= depth_step;
			}

			return layer_depth > depth ? 0.0 : 1.0;
		}

		vec2 parallax(vec2 uv, vec3 view_dir) { 
			vec2 dPdx = dFdx(uv);
			vec2 dPdy = dFdy(uv);
			
			float layers = mix(16, 8, abs(view_dir.y));
			float depth_step = 1.0 / layers;
			float layer_depth = 0.0;
			vec2 P = view_dir.xz / abs(view_dir.y) * u_height_scale; 
			vec2 uv_step = P / layers;
			float depth = texture(u_displacement, uv).r;
			
			while (layer_depth < depth) {
				uv -= uv_step;
				depth = textureGrad(u_displacement, uv, dPdx, dPdy).r;  
				layer_depth += depth_step;
			}

			vec2 prev_uv = uv + uv_step;

			float depth1 = depth - layer_depth;
			float depth0 = texture(u_displacement, prev_uv).r - layer_depth + depth_step;
			
			float w = depth1 / (depth1 - depth0);
			return mix(uv, prev_uv, w);
		}   
	]],

	fragment = [[
		mat3 tbn = mat3(
			normalize(v_tangent),
			normalize(v_normal),
			normalize(cross(v_tangent, v_normal))
			);

		vec2 uv = parallax(v_uv, normalize(-v_wpos.xyz) * tbn);

		vec4 c = texture(t_albedo, uv, -1) * u_material_color;
		data.albedo = c.rgb;
		data.alpha = c.a;
		#ifdef COLOR0_ATTR
			data.albedo.rgb *= v_color.rgb;
		#endif

		#ifdef AO_ATTR
			data.ao = v_ao;
		#else
			data.ao = 1;
		#endif

		#ifdef HAS_AMBIENT_OCCLUSION_TEX
			data.ao *= texture(t_ambient_occlusion, uv).r;
		#endif

		#ifdef FUR 
			data.alpha = saturate(data.alpha - v_fur_layer);
		#endif

		// dx shader has internal errors on this
		#if defined ALPHA_CUTOUT && !defined LUMIX_DX_SHADER 
			if(data.alpha < 0.5) discard;
		#endif
			
		data.roughness = saturate(texture(t_roughness, uv).g * u_roughness);
		data.metallic  = texture(t_metallic, uv).b * u_metallic;
		data.N.xz = texture(t_normal, uv).xy * 2 - 1;
		data.N.y = sqrt(saturate(1 - dot(data.N.xz, data.N.xz))); 
		data.N = tbn * data.N;
		data.emission = u_emission;
		data.translucency = u_translucency;

		//data.shadow = 1;
		data.shadow = selfshadow(uv, Global.light_dir.xyz * tbn);
	]]
})