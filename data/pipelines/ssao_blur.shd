include "pipelines/common.glsl"

vertex_shader [[
	
	layout (location = 0) out vec2 v_uv;
	
	void main()
	{
		gl_Position = fullscreenQuad(gl_VertexID, v_uv);
	}
]]

fragment_shader [[
    layout (location = 0) out vec4 o_color;
    layout (location = 0) in vec2 v_uv;
    layout (binding=0) uniform sampler2D u_depth_buffer;
    layout (binding=1) uniform sampler2D u_input;

    const vec2 res = Global.framebuffer_size;

	void main() {
        vec2 st = v_uv*res/2.0;
        vec2 iuv = floor(st);
        vec2 bWeight = vec2(1.0) - fract(st);
        float depth = texelFetch(u_depth_buffer, ivec2(st), 0).r;

        float totalAO = 0.0;
        float totalW = 0.0;
        for (float x=0; x<2; ++x)
        for (float y=0; y<2; ++y)
        {
            ivec2 uv = ivec2(iuv+vec2(x, y));
            float d = texelFetch(u_depth_buffer, uv, 0).r;
            float ao = texelFetch(u_input, uv, 0).r;

            float sampleWeight = (x-bWeight.x) * (y-bWeight.y);
            sampleWeight += max(0.001, 0.1 - abs(depth-d)) * 30.0;
            totalW += sampleWeight;
            totalAO += ao * sampleWeight;
        }
        o_color.rgb = vec3(totalAO/totalW);
        o_color.w = 1.0;
	}
]]